<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd">

    <!--配置自动扫描的包-->
    <context:component-scan base-package="com.atguigu.sencondkill">
        <context:exclude-filter type="annotation"
                                expression="org.springframework.stereotype.Controller"></context:exclude-filter>
        <context:exclude-filter type="annotation"
                                expression="org.springframework.web.bind.annotation.ControllerAdvice"></context:exclude-filter>
    </context:component-scan>

    <!--引入外部资源文件-->
    <context:property-placeholder location="classpath:jdbc.properties"></context:property-placeholder>

    <!--数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driverClass}"></property>
        <property name="url" value="${jdbc.jdbcUrl}"></property>
        <property name="username" value="${jdbc.user}"></property>
        <property name="password" value="${jdbc.password}"></property>
        <property name="maxActive" value="10"/>
        <property name="minIdle" value="5"/>
    </bean>

    <!--配置mybatis的sqlsessionfactorybean整合Spring-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--加载DataSource数据源-->
        <property name="dataSource" ref="dataSource"></property>
        <!--指定mybatis的配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!--javabean别名-->
        <property name="typeAliasesPackage" value="com.atguigu.sencondkill.pojo"></property>
    </bean>

    <!--   配置mapper的批量扫描:从mapper的包中扫描出mapper接口,自动创建代理对象并且在spring容器中注册 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <!-- 指定扫描的包名,即mapper接口所在的包 -->
        <property name="basePackage" value="com.atguigu.sencondkill.mapper"></property>
        <!-- 注意:这里不能引用sqlsessionFactory,因为这里会先执行,如果引用了,会造成上面的datasource异常 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"></property>
    </bean>

    <!-- 配置一个可以批量操作的sqlsession,如果需要使用批量操作的功能,那么就需要手动配置 -->
    <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
        <constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"></constructor-arg>
        <!-- 指定sqlsession的执行器为批量执行器,默认是简单执行器 -->
        <constructor-arg name="executorType" value="BATCH"></constructor-arg>
    </bean>

    <!--配置事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"></property>
    </bean>

    <!--配置基于注解的声明式事务,在service层加上事物的注解
        默认使用注解来管理事务行为
    -->
    <tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>
</beans>